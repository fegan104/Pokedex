import com.frankegan.pokedex.model.TypeName;


CREATE TABLE pokemonMove (
    id INTEGER AS Int NOT NULL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    accuracy INTEGER AS Int,
    pp INTEGER AS Int,
    priority INTEGER AS Int NOT NULL,
    power INTEGER AS Int,
    damageClassName TEXT NOT NULL,
    damageClassUrl TEXT NOT NULL,
    typeName TEXT AS TypeName NOT NULL,
    typeUrl TEXT NOT NULL
);

CREATE TABLE pokemonToMove (
    pokemonId INTEGER AS Int NOT NULL,
    moveId INTEGER AS Int NOT NULL,
    moveName TEXT NOT NULL,
    moveUrl TEXT NOT NULL,
    FOREIGN KEY (pokemonId) REFERENCES pokemon(id),
    UNIQUE (pokemonId, moveId, moveName, moveUrl)
);

CREATE TABLE moveFlavorText (
    moveId INTEGER AS Int NOT NULL,
    flavorText TEXT NOT NULL,
    languageName TEXT NOT NULL,
    languageUrl TEXT NOT NULL,
    FOREIGN KEY (moveId) REFERENCES pokemonMove(id),
    UNIQUE (moveId, flavorText, languageName),
    UNIQUE (moveId, flavorText, languageUrl)
);

CREATE TABLE moveName (
    moveId INTEGER AS Int NOT NULL,
    displayName TEXT NOT NULL,
    languageName TEXT NOT NULL,
    languageUrl TEXT NOT NULL,
    UNIQUE (moveId, displayName, languageName),
    UNIQUE (moveId, displayName, languageUrl),
    FOREIGN KEY (moveId) REFERENCES pokemonMove(id)
);

inertMove:
INSERT OR REPLACE INTO pokemonMove(
    id,
    name,
    accuracy,
    pp,
    priority,
    power,
    damageClassName,
    damageClassUrl,
    typeName,
    typeUrl
)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

inertPokemonToMove:
INSERT OR REPLACE INTO pokemonToMove(
    pokemonId,
    moveId,
    moveName,
    moveUrl
)
VALUES(?, ?, ?, ?);

selectMovesByPokemonId:
SELECT *
 FROM pokemonToMove
LEFT OUTER JOIN pokemonMove
 ON pokemonToMove.pokemonId = :pokemonId
 AND pokemonToMove.moveId = pokemonMove.id
LEFT OUTER JOIN moveFlavorText
 ON pokemonMove.id = moveFlavorText.moveId
LEFT OUTER JOIN moveName
 ON pokemonMove.id = moveName.moveId
WHERE moveName.languageName = moveFlavorText.languageName;

selectMovesByMoveId:
SELECT *
 FROM pokemonToMove
LEFT OUTER JOIN pokemonMove
 ON pokemonToMove.pokemonId = :pokemonId
 AND pokemonToMove.moveId = pokemonMove.id
LEFT OUTER JOIN moveFlavorText
 ON pokemonMove.id = moveFlavorText.moveId
LEFT OUTER JOIN moveName
 ON pokemonMove.id = moveName.moveId
WHERE moveName.languageName = moveFlavorText.languageName
AND pokemonToMove.moveId IN :moveIds;

selectPokemonMoves:
SELECT moveName, moveUrl FROM pokemonToMove
WHERE pokemonId = :pokemonid;

countMovesByPokemon:
SELECT COUNT(*) AS Int FROM pokemonToMove
WHERE pokemonId = :pokemonid;

selectMoveIdAndUrlByPokemonId:
SELECT moveId, moveUrl FROM pokemonToMove
WHERE pokemonId = :pokemonid;

selectMoveIdByPokemonId:
SELECT moveId FROM pokemonToMove
WHERE pokemonId = :pokemonid;

insertMoveName:
INSERT OR REPLACE INTO moveName(
   moveId,
   displayName,
   languageName,
   languageUrl
)
VALUES(?, ?, ?, ?);

insertMoveFlavorText:
INSERT OR REPLACE INTO moveFlavorText(
    moveId,
    flavorText,
    languageName,
    languageUrl
)
VALUES(?, ?, ?, ?);